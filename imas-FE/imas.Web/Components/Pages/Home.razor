@page "/"
@page "/home"
@using imas.Web.Services
@inject IAuthenticationService AuthService
@inject ISafeNavigationService SafeNavigation
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Home</PageTitle>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Checking authentication...</p>
    </div>
}
@* Temporarily show home page without authentication for testing *@
@* else if (isAuthenticated) *@
@if (!isLoading)
{
    <h1>Hello, world!</h1>
    <p>Welcome to your new app, @(authState.Username ?? "Guest")!</p>
    
    @if (isAuthenticated)
    {
        <div class="alert alert-success">
            <h4>âœ… Authenticated User</h4>
            <p><strong>Username:</strong> @authState.Username</p>
            <p><strong>Email:</strong> @authState.Email</p>
            <p><strong>Token Present:</strong> @(!string.IsNullOrEmpty(authState.Token) ? "Yes" : "No")</p>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <h4>ðŸ”“ Guest Access (Testing Mode)</h4>
            <p>You are viewing the home page without authentication.</p>
            <p>In production, this would require login.</p>
            <a href="/login" class="btn btn-primary">Go to Login</a>
        </div>
    }
}

@code {
    private bool isLoading = true;
    private bool isAuthenticated = false;
    private imas.Web.Services.AuthenticationState authState = new();

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to authentication state changes
        AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;
        
        await CheckAuthenticationAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Re-check authentication after render to get the latest state
            await Task.Delay(100);
            await CheckAuthenticationAsync();
            
            // Temporarily disabled for testing - allow access without authentication
            /*
            if (!isAuthenticated)
            {
                // If not authenticated, redirect after a moment
                await Task.Delay(1000); // Give user time to see the message
                await SafeNavigation.NavigateToAsync("/login");
            }
            */
        }
    }

    private void OnAuthenticationStateChanged(imas.Web.Services.AuthenticationState newState)
    {
        authState = newState;
        isAuthenticated = newState.IsAuthenticated;
        isLoading = false;
        InvokeAsync(StateHasChanged);
    }

    private async Task CheckAuthenticationAsync()
    {
        isLoading = true;
        StateHasChanged();
        
        // Add a small delay to ensure services are initialized
        await Task.Delay(100);
        
        // Check authentication state
        authState = AuthService.GetAuthenticationState();
        isAuthenticated = authState.IsAuthenticated;
        isLoading = false;
        
        StateHasChanged();
    }

    public void Dispose()
    {
        AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
