@using imas.Web.Services
@inject IAuthenticationService AuthService
@inject ISafeNavigationService SafeNavigation
@inject NavigationManager Navigation
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">
            <span class="bi bi-star-fill" aria-hidden="true"></span> MARA
        </a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        @if (authState.IsAuthenticated)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill" aria-hidden="true"></span> Home
                </NavLink>
            </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="counter">
                    <span class="bi bi-plus-square-fill" aria-hidden="true"></span> Counter
                </NavLink>
            </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="weather">
                    <span class="bi bi-list-nested" aria-hidden="true"></span> Weather
                </NavLink>
            </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="todos">
                    <span class="bi bi-check-square-fill" aria-hidden="true"></span> Todos
                </NavLink>
            </div>
        }

        <div class="nav-divider"></div>

        @if (authState.IsAuthenticated)
        {
            <div class="nav-item px-3 user-info">
                <div class="user-profile">
                    <span class="bi bi-person-circle" aria-hidden="true"></span>
                    <div class="user-details">
                        <div class="username">@authState.Username</div>
                        <div class="email">@authState.Email</div>
                    </div>
                </div>
            </div>

            <div class="nav-item px-3">
                <button class="nav-link logout-btn" @onclick="HandleLogout">
                    <span class="bi bi-box-arrow-right" aria-hidden="true"></span> Logout
                </button>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="register">
                    <span class="bi bi-person-plus-fill" aria-hidden="true"></span> Register
                </NavLink>
            </div>
        }
    </nav>
</div>

<style>
    .nav-divider {
        height: 1px;
        background: rgba(255, 255, 255, 0.1);
        margin: 10px 15px;
    }

    .user-info {
        margin-bottom: 10px;
    }

    .user-profile {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 8px 12px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 6px;
    }

    .user-profile .bi {
        font-size: 1.2em;
        color: #fff;
    }

    .user-details {
        flex: 1;
        min-width: 0;
    }

    .username {
        color: #fff;
        font-weight: 600;
        font-size: 0.9em;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .email {
        color: rgba(255, 255, 255, 0.7);
        font-size: 0.75em;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .logout-btn {
        background: none;
        border: none;
        width: 100%;
        text-align: left;
        color: inherit;
        padding: 0.5rem 0.75rem;
        border-radius: 0.375rem;
        text-decoration: none;
        display: flex;
        align-items: center;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .logout-btn:hover {
        background-color: rgba(255, 255, 255, 0.1);
        color: #fff;
    }

    .logout-btn .bi {
        margin-right: 0.75rem;
    }
</style>

@code {
    private AuthenticationState authState = new();

    protected override void OnInitialized()
    {
        authState = AuthService.GetAuthenticationState();
        AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private void OnAuthenticationStateChanged(AuthenticationState newState)
    {
        authState = newState;
        InvokeAsync(StateHasChanged);
    }

    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        await SafeNavigation.NavigateToAsync("/");
    }

    public void Dispose()
    {
        AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
