@page "/login"
@layout AuthLayout
@using mara.Web.Services
@using System.ComponentModel.DataAnnotations
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Login - MARA</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <h2>Welcome to MARA</h2>
            <p>Please sign in to your account</p>
        </div>

        <EditForm Model="@loginRequest" OnValidSubmit="@HandleLogin" FormName="LoginForm" class="login-form">
            <DataAnnotationsValidator />
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    <i class="fas fa-exclamation-triangle"></i>
                    @errorMessage
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success" role="alert">
                    <i class="fas fa-check-circle"></i>
                    @successMessage
                </div>
            }

            <div class="form-group">
                <label for="username" class="form-label">
                    <i class="fas fa-user"></i>
                    Username
                </label>
                <InputText @bind-Value="loginRequest.Username" 
                          class="form-control" 
                          id="username" 
                          placeholder="Enter your username"
                          disabled="@isLoading" />
                <ValidationMessage For="@(() => loginRequest.Username)" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="password" class="form-label">
                    <i class="fas fa-lock"></i>
                    Password
                </label>
                <div class="password-input-container">
                    <InputText @bind-Value="loginRequest.Password" 
                              type="@(showPassword ? "text" : "password")" 
                              class="form-control" 
                              id="password" 
                              placeholder="Enter your password"
                              disabled="@isLoading" />
                    <button type="button" 
                            class="password-toggle-btn" 
                            @onclick="TogglePasswordVisibility"
                            disabled="@isLoading">
                        <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                    </button>
                </div>
                <ValidationMessage For="@(() => loginRequest.Password)" class="text-danger" />
            </div>

            <div class="form-actions">
                <button type="submit" 
                        class="btn btn-primary btn-login" 
                        disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Signing in...</span>
                    }
                    else
                    {
                        <i class="fas fa-sign-in-alt"></i>
                        <span>Sign In</span>
                    }
                </button>
            </div>
        </EditForm>

        <div class="login-footer">
            <p>Don't have an account? 
                <a href="/register" class="register-link">Sign up here</a>
            </p>
            <div class="demo-credentials">
                <small class="text-muted">
                    <strong>Demo Account:</strong> Username: admin | Password: admin123
                </small>
            </div>
        </div>
    </div>
</div>

<style>
    .login-container {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }

    .login-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
        padding: 40px;
        width: 100%;
        max-width: 450px;
        animation: slideUp 0.6s ease-out;
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .login-header {
        text-align: center;
        margin-bottom: 30px;
    }

    .login-header h2 {
        color: #333;
        margin-bottom: 8px;
        font-weight: 600;
    }

    .login-header p {
        color: #666;
        margin: 0;
    }

    .login-form {
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        display: block;
        margin-bottom: 6px;
        color: #333;
        font-weight: 500;
    }

    .form-label i {
        margin-right: 8px;
        color: #667eea;
        width: 16px;
    }

    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        font-size: 16px;
        transition: all 0.3s ease;
        background-color: #fff;
    }

    .form-control:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .form-control:disabled {
        background-color: #f8f9fa;
        opacity: 0.7;
    }

    .password-input-container {
        position: relative;
    }

    .password-toggle-btn {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: #666;
        cursor: pointer;
        padding: 4px;
        border-radius: 4px;
        transition: color 0.3s ease;
    }

    .password-toggle-btn:hover:not(:disabled) {
        color: #667eea;
    }

    .password-toggle-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .btn-login {
        width: 100%;
        padding: 14px;
        font-size: 16px;
        font-weight: 600;
        border-radius: 8px;
        border: none;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .btn-login:hover:not(:disabled) {
        transform: translateY(-1px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
    }

    .btn-login:active:not(:disabled) {
        transform: translateY(0);
    }

    .btn-login:disabled {
        opacity: 0.7;
        cursor: not-allowed;
        transform: none;
    }

    .alert {
        padding: 12px 16px;
        border-radius: 8px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .alert-danger {
        background-color: #fee;
        border: 1px solid #fcc;
        color: #c33;
    }

    .alert-success {
        background-color: #efe;
        border: 1px solid #cfc;
        color: #363;
    }

    .login-footer {
        text-align: center;
    }

    .register-link {
        color: #667eea;
        text-decoration: none;
        font-weight: 500;
    }

    .register-link:hover {
        text-decoration: underline;
    }

    .demo-credentials {
        margin-top: 15px;
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 6px;
    }

    .text-danger {
        color: #dc3545;
        font-size: 14px;
        margin-top: 4px;
    }

    .spinner-border {
        width: 1rem;
        height: 1rem;
        border-width: 2px;
    }

    @@media (max-width: 480px) {
        .login-card {
            padding: 30px 20px;
            margin: 10px;
        }
    }
</style>

@code {
    [SupplyParameterFromForm]
    private LoginRequest loginRequest { get; set; } = new();
    
    private bool isLoading = false;
    private bool showPassword = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    protected override void OnInitialized()
    {
        // Check if user is already authenticated
        var authState = AuthService.GetAuthenticationState();
        if (authState.IsAuthenticated)
        {
            // Redirect to home page if already authenticated
            Navigation.NavigateTo("/");
        }

        // Check for success message from registration
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("registered", out var registered) && registered == "true")
        {
            successMessage = "Registration successful! Please sign in with your credentials.";
        }
    }

    private async Task HandleLogin()
    {
        if (isLoading) return;

        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();

        try
        {
            var (success, message, response) = await AuthService.LoginAsync(loginRequest);

            if (success && response != null)
            {
                // Add a small delay to ensure state is updated
                await Task.Delay(100);
                
                // Redirect to home page or intended destination
                var returnUrl = GetReturnUrl();
                Navigation.NavigateTo(returnUrl, forceLoad: true);
            }
            else
            {
                errorMessage = string.IsNullOrEmpty(message) ? "Login failed. Please check your credentials." : message;
            }
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = $"Connection error: {httpEx.Message}";
        }
        catch (TaskCanceledException)
        {
            errorMessage = "Request timed out. Please try again.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private string GetReturnUrl()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var returnUrl))
        {
            var url = returnUrl.FirstOrDefault() ?? "/";
            // Avoid redirecting back to login pages
            if (url == "/login")
                return "/";
            return url;
        }
        return "/";
    }
}
